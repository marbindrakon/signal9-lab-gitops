- name: set SNO flag true
  ansible.builtin.set_fact:
    is_sno: true
  when:
    - cluster_platform == "agent"
    - agent_platform_config['cluster_sizes'][cluster_size]['controller_count']  == 1

- name: set SNO flag false
  ansible.builtin.set_fact:
    is_sno: false
  when:
    - cluster_platform == "agent"
    - agent_platform_config['cluster_sizes'][cluster_size]['controller_count']  != 1

- name: allocate metallb network
  ansible.builtin.include_tasks: "include/_allocate_metallb_network.yml"

- name: get agents
  kubernetes.core.k8s_info:
    api_version: agent-install.openshift.io/v1beta1
    kind: agent
    namespace: "{{ agent_platform_config['shared_infra_env']['namespace'] }}"
  register: agent_list

- name: list unbound agents only
  ansible.builtin.set_fact:
    unbound_agents: "{{ agent_list | community.general.json_query(query) }}"
  vars:
    query: "resources[?status.debugInfo.state==`known-unbound`]"
  when: cluster_state == "present"

- name: list bound agents only
  ansible.builtin.set_fact:
    bound_agents: "{{ agent_list | community.general.json_query(query) }}"
  vars:
    query: "resources[?spec.clusterDeploymentName.name==`{{ cluster_name }}`]"

- name: initialize agent list
  ansible.builtin.set_fact:
    candidate_agents: []
    current_agents: []
    desired_agents: "{{ agent_platform_config['cluster_sizes'][cluster_size]['controller_count'] + agent_platform_config['cluster_sizes'][cluster_size]['worker_count'] }}"

- name: populate info for unbound agents
  ansible.builtin.set_fact:
    candidate_agents: "{{ candidate_agents + [{'name': agent_name, 'ip': agent_ip}] }}"
  vars:
    agent_name: "{{ item.metadata.name }}"
    agent_ip: "{{ item | community.general.json_query('status.inventory.interfaces[?name==`bond1.16`].ipV4Addresses | [0][0]') | ansible.utils.ipaddr('address')}}"
  loop: "{{ unbound_agents }}"
  when: cluster_state == "present"

- name: populate info for bound agents
  ansible.builtin.set_fact:
    current_agents: "{{ current_agents + [{'name': agent_name, 'ip': agent_ip}] }}"
  vars:
    agent_name: "{{ item.metadata.name }}"
    agent_ip: "{{ item | community.general.json_query('status.inventory.interfaces[?name==`bond1.16`].ipV4Addresses | [0][0]') | ansible.utils.ipaddr('address')}}"
  loop: "{{ bound_agents }}"

- name: calculate needed agents
  ansible.builtin.set_fact:
    needed_agents: "{{ desired_agents|int - current_agents|length }}"
  when: cluster_state == "present"

- name: initialize selected agent list
  ansible.builtin.set_fact:
    selected_agents: []
  when: cluster_state == "present"

- name: select any new agents
  ansible.builtin.set_fact:
    selected_agents: "{{ candidate_agents[0:needed_agents|int] }}"
  when: 
    - cluster_state == "present"
    - needed_agents | int > 0

- name: extend selected agent list with existing agents
  ansible.builtin.set_fact:
    selected_agents: "{{ selected_agents + current_agents }}"
  when: cluster_state == "present"

- name: debug agent list
  ansible.builtin.debug:
    msg: "{{ selected_agents }}"
  when: cluster_state == "present"

- name: debug current agent list
  ansible.builtin.debug:
    msg: "{{ current_agents }}"

- name: claim selected agents
  kubernetes.core.k8s:
    api_version: agent-install.openshift.io/v1beta1
    kind: agent
    namespace: metal-infra-env
    name: "{{ item.name }}"
    state: patched
    definition:
      spec:
        clusterDeploymentName:
          namespace: "{{ cluster_name }}"
          name: "{{ cluster_name }}"
  loop: "{{ selected_agents }}"
  when: cluster_state == "present"

- name: set agent role for SNO
  kubernetes.core.k8s:
    api_version: agent-install.openshift.io/v1beta1
    kind: agent
    namespace: metal-infra-env
    name: "{{ item.name }}"
    state: patched
    definition:
      spec:
        role: "master"
  loop: "{{ selected_agents }}"
  when: 
    - cluster_state == "present"
    - is_sno == true

- name: set SNO VIP data (create)
  ansible.builtin.set_fact:
    internal_api_vip: "{{ selected_agents[0].ip }}"
    internal_ingress_vip: "{{ selected_agents[0].ip }}"
  when: 
    - cluster_state == "present"
    - is_sno == true

- name: set SNO VIP data (destroy)
  ansible.builtin.set_fact:
    internal_api_vip: "{{ current_agents[0].ip }}"
    internal_ingress_vip: "{{ current_agents[0].ip }}"
  when: 
    - internal_ingress_vip is not defined
    - cluster_state == "absent"
    - is_sno == true

- name: allocate vips from netbox
  ansible.builtin.include_tasks: "include/_allocate_vips_from_netbox.yml"
  when: is_sno == false

