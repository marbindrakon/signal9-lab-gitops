- name: Fail if target account is not provided
  ansible.builtin.fail:
    msg: "aws_target_account must be provided to deploy to AWS"
  when: aws_target_account is not defined or aws_target_account == ""

- name: read serviceaccount token
  no_log: true
  ansible.builtin.set_fact:
    vault_jwt: "{{ lookup('ansible.builtin.file', hashicorp_vault['jwt_location']) }}"
  when: vault_jwt is not defined

- name: assume trusted automation role in central account
  amazon.aws.sts_assume_role:
    role_arn: "{{ platform_configs.aws.sts_trusted_role_arn }}"
    role_session_name: "{{ platform_configs.aws.sts_session_name }}"
  register: aws_trusted_role
 
- name: assume role in target aws account
  amazon.aws.sts_assume_role:
    access_key: "{{ aws_trusted_role.sts_creds.access_key }}"
    secret_key: "{{ aws_trusted_role.sts_creds.secret_key }}"
    session_token: "{{ aws_trusted_role.sts_creds.session_token }}"
    role_arn: "{{ platform_configs.aws.sts_role_arn }}"
    external_id: "{{ platform_configs.aws.sts_external_id }}"
    role_session_name: "{{ platform_configs.aws.sts_session_name }}"
  register: aws_assumed_role

- name: set up identity provider for sts
  block:

    - name: create temporary directory for ccoctl
      ansible.builtin.tempfile:
        state: directory
      register: aws_ccoctl_tempdir
    
    - name: make credential requests directory
      ansible.builtin.file:
        path: "{{ aws_ccoctl_tempdir.path }}/cred-reqs"
        state: directory
    
    - name: Extract credential requests for OCP release
      ansible.builtin.command:
        cmd: "/usr/local/bin/oc adm release extract --credentials-requests --cloud=aws {{ cluster_release_image }}"
        chdir: "{{ aws_ccoctl_tempdir.path }}/cred-reqs"
    
    - name: Use ccoctl to create openid identity provider keys
      ansible.builtin.command:
        cmd: "/usr/local/bin/ccoctl aws create-key-pair"
    
    - name: Use ccoctl to create openid identity provider definition
      ansible.builtin.command:
        cmd: "/usr/local/bin/ccoctl aws create-identity-provider --dry-run --region {{ aws_region }} --public-key-file serviceaccount-signer.public --name {{ cluster_name }} --create-private-s3-bucket"

    - name: Add cert-manager credential request
      ansible.builtin.template:
        src: "aws-cert-manager-request.yaml.j2"
        dest: "{{ aws_ccoctl_tempdir.path }}/cred-reqs/cert-manager.yaml"
    
    - name: Store openid idp metadata in S3
      amazon.aws.s3_object:
        mode: put
        overwrite: different
        object: "{{ cluster_name }}/.well-known/openid-configuration"
        content: "{{ lookup('template', 'aws-openid-configuration.j2') | to_nice_json }}"

    - name: Store openid jwks in S3
      amazon.aws.s3_object:
        mode: put
        overwrite: different
        object: "{{ cluster_name }}/keys.json"
        src: "{{ aws_ccoctl_tempdir.path }}/03-keys.json"
   
    - name: Store openid private key in Vault
      community.hashi_vault.vault_write:
        path: "{{ hashicorp_vault['secret_base_path'] }}/data/{{ hashicorp_vault['cluster_secrets']['service-signing-key'] }}"
        data:
          data:
            bound-service-account-signing-key.key: "{{ lookup('file', aws_ccoctl_tempdir.path + '/serviceaccount-signer.private') }}"

    - name: Template identity provider CLI input
      ansible.builtin.template:
        dest: "{{ aws_ccoctl_tempdir.path }}/aws-idp-input.json"
        src: "aws-idp-input.json.j2" 
    
    - name: Create identity provider in IAM
      ansible.builtin.command:
        cmd: "/usr/local/bin/aws iam create-open-id-connect-provider --cli-input-json file://{{ aws_ccoctl_tempdir.path }}/aws-idp-input.json"
      register: aws_idp_cli_output
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_assumed_role.sts_creds.access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_assumed_role.sts_creds.secret_key }}"
        AWS_SESSION_TOKEN: "{{ aws_assumed_role.sts_creds.session_token }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"

    - name: Save ARN of new IDP
      ansible.builtin.set_fact:
        aws_idp_output_parsed: "{{ aws_idp_cli_output.stdout | from_json }}"
    
    - name: Use ccoctl to create IAM roles for cluster
      ansible.builtin.command:
        cmd: "/usr/local/bin/ccoctl aws create-iam-roles --credentials-requests-dir cred-reqs --name {{ cluster_name }} --identity-provider-arn {{ aws_idp_output_parsed.OpenIDConnectProviderArn }}"
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_assumed_role.sts_creds.access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_assumed_role.sts_creds.secret_key }}"
        AWS_SESSION_TOKEN: "{{ aws_assumed_role.sts_creds.session_token }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"

    - name: Patch cluster authentication manifest for custom issuer
      ansible.builtin.lineinfile:
        search_string: "serviceAccountIssuer"
        line: "  serviceAccountIssuer: {{ platform_configs.aws.sts_idp_issuer_base }}/{{ cluster_name }}"
        path: "{{ aws_ccoctl_tempdir.path }}/manifests/cluster-authentication-02-config.yaml"

    - name: Generate manifest bundle for cluster deployment with STS
      ansible.builtin.shell:
        cmd: "/usr/local/bin/oc create cm foo --dry-run=client -o yaml --from-file=manifests"
      register: aws_manifest_oc_output

    - name: Save file contents for cluster build
      ansible.builtin.set_fact:
        aws_extra_manifests: "{{ aws_manifest_oc_output.stdout | from_yaml }}"

    - name: Store extra manifests in Vault
      community.hashi_vault.vault_write:
        path: "{{ hashicorp_vault['secret_base_path'] }}/data/{{ hashicorp_vault['cluster_secrets']['aws-extra-manifests'] }}"
        data:
          data: "{{ aws_extra_manifests.data }}"
  module_defaults:
    amazon.aws.s3_object:
      access_key: "{{ aws_trusted_role.sts_creds.access_key }}"
      secret_key: "{{ aws_trusted_role.sts_creds.secret_key }}"
      session_token: "{{ aws_trusted_role.sts_creds.session_token }}"
      region: "{{ platform_configs.aws.sts_idp_bucket_region }}"
      bucket: "{{ platform_configs.aws.sts_idp_bucket }}"
    ansible.builtin.command:
      chdir: "{{ aws_ccoctl_tempdir.path }}"
    community.hashi_vault.vault_write:
      url: "{{ hashicorp_vault['url'] }}"
      auth_method: jwt
      mount_point: "{{ hashicorp_vault['auth_mount'] }}"
      role_id: "{{ hashicorp_vault['auth_role'] }}"
      jwt: "{{ vault_jwt }}"

  always:
    - name: clean up temporary directory for ccoctl
      ansible.builtin.file:
        path: "{{ aws_ccoctl_tempdir.path }}"
        state: absent
  when: cluster_state == "present"

- name: clean up identity provider for sts
  block:

    - name: Delete openid idp metadata in S3
      amazon.aws.s3_object:
        mode: delobj
        object: "{{ cluster_name }}/.well-known/openid-configuration"

    - name: Store openid jwks in S3
      amazon.aws.s3_object:
        mode: delobj
        object: "{{ cluster_name }}/keys.json"
   
    - name: delete openid private key in Vault
      community.hashi_vault.vault_delete:
        path: "{{ hashicorp_vault['secret_base_path'] }}/data/{{ hashicorp_vault['cluster_secrets']['service-signing-key'] }}"
      no_log: true

    - name: Delete extra manifests in Vault
      community.hashi_vault.vault_delete:
        path: "{{ hashicorp_vault['secret_base_path'] }}/data/{{ hashicorp_vault['cluster_secrets']['aws-extra-manifests'] }}"
      no_log: true
   
    #- name: Get IAM roles for cluster

    #- name: Delete IAM roles for cluster
    
    #- name: Get identity provider in IAM
    
    #- name: Delete identity provider in IAM
   module_defaults:
    community.hashi_vault.vault_delete:
      url: "{{ hashicorp_vault['url'] }}"
      auth_method: jwt
      mount_point: "{{ hashicorp_vault['auth_mount'] }}"
      role_id: "{{ hashicorp_vault['auth_role'] }}"
      jwt: "{{ vault_jwt }}"
   
  when: cluster_state == "absent"
